name: E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    paths:
      - 'QuotesService/**'
      - 'docker-compose/**'
      - '.github/workflows/e2e-tests.yml'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-playwright requests
          playwright install --with-deps

      - name: Set execute permission for start-compose.sh
        working-directory: ./docker-compose
        run: chmod +x ./start-compose.sh

      - name: Build and start with docker-compose
        working-directory: ./docker-compose
        run: |
          ./start-compose.sh -d

      - name: Wait for application to be ready
        run: |
          python -c '
          import requests, time
          print("Checking container status:")
          import subprocess
          subprocess.run("docker ps", shell=True)
          print("\nWaiting for application at http://localhost:80/...")
          for i in range(60):
              try:
                  response = requests.get("http://localhost:80/")
                  response2 = requests.get("http://127.0.0.1:80/")
                  if response.status_code == 200 or response2.status_code == 200:
                      print("Application is ready!")
                      exit(0)
              except requests.exceptions.ConnectionError:
                  print(f"Attempt {i+1}/60: Connection failed")
                  time.sleep(1)
          print("Failed to connect after 60 attempts")
          exit(1)
          '

      - name: Run E2E tests
        env:
          API_KEY: test_api_key
        working-directory: ./QuotesService
        run: pytest tests/e2e -v

      - name: Docker logs on failure
        if: failure()
        working-directory: ./docker-compose
        run: docker-compose logs

      - name: Cleanup
        if: always()
        working-directory: ./docker-compose
        run: docker-compose down -v